Task 02

1) What happens when the number of hidden nodes increase?


import matplotlib.pyplot as plt

hidden_layer_sizes = [1, 2, 3, 4, 5, 10, 20, 50, 100]
accuracies = []

for n_h in hidden_layer_sizes:
    parameters = nn_model(X, Y, n_h)
    predictions = predict(parameters, X)
    accuracy = float((np.dot(Y, predictions.T) + np.dot(1-Y, 1-predictions.T)) / float(Y.size) * 100)
    accuracies.append(accuracy)

plt.plot(hidden_layer_sizes, accuracies)
plt.xlabel('Number of Hidden Nodes')
plt.ylabel('Accuracy (%)')
plt.title('Effect of Hidden Nodes on Accuracy')
plt.show()



2) Can you explain the pattern of the accuracy when the hidden nodes increase?

* As the number of hidden nodes increases, the model can learn more complex representations of the data. Initially, this results in better performance because the model can capture more intricate patterns and relationships.                                                           
* After a certain point, adding more hidden nodes results in smaller improvements in accuracy. This is because the model has already captured most of the significant patterns in the data. Additional nodes contribute less to the overall performance.



============================================================================================================================================================================================
4.6 - Tuning hidden layer size

hidden_layer_sizes = [1, 2, 3, 4, 5, 20, 50]
for i, n_h in enumerate(hidden_layer_sizes):
  parameters = nn_model(X, Y, n_h, num_iterations = 5000)
  # plot_decision_boundary(lambda x: predict(parameters, x.T), X, Y)
  predictions = predict(parameters, X)
  accuracy = float((np.dot(Y,predictions.T) + np.dot(1-Y,1-predictions.T))/float(Y.size)*100)
  print ("Accuracy for {} hidden units: {} %".format(n_h, accuracy))


-Output-


<ipython-input-25-84758167eaa7>:6: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)
  accuracy = float((np.dot(Y,predictions.T) + np.dot(1-Y,1-predictions.T))/float(Y.size)*100)

Accuracy for 1 hidden units: 67.5 %
Accuracy for 2 hidden units: 67.25 %
Accuracy for 3 hidden units: 90.75 %
Accuracy for 4 hidden units: 90.5 %
Accuracy for 5 hidden units: 91.25 %
Accuracy for 20 hidden units: 90.0 %
Accuracy for 50 hidden units: 90.25 %



