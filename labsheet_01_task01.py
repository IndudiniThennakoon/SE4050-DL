# -*- coding: utf-8 -*-
"""Labsheet 01 _ Task01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a8_PyyPbxRDyXxrlcdl1v1-czGGnZGVK

#**Labsheet 01 - IT21170966**

### **TASK 01**
"""

from __future__ import division, print_function, unicode_literals

import numpy as np

"""#### Task 1 Question 1"""

# Parameters
scale = 1.0  # Scale parameter, which is the inverse of the rate parameter (lambda)
size = (4, 4)  # Shape of the array

"""#### Create a random 4x4 array from an exponential distribution."""

array = np.random.exponential(scale, size)

"""#### Printing array"""

print(array)

"""#### Task 1 Question 2"""

import matplotlib.pyplot as plt

"""
#### Create a random 100000x1 array from the same exponential distribution and visualize the distribution histogram along with uniform and normal distributions."""

exp_data = np.random.exponential(scale, 100000)
uniform_data = np.random.rand(100000)
normal_data = np.random.randn(100000)

"""#### Plot the histograms

"""

plt.hist(exp_data, density=True, bins=150, histtype='step', color='green', label='Exponential')
plt.hist(uniform_data, density=True, bins=150, histtype='step', color='blue', label='Uniform')
plt.hist(normal_data, density=True, bins=150, histtype='step', color='red', label='Normal')
plt.legend(loc='upper right')
plt.title("Random Distributions")
plt.xlabel("Value")
plt.ylabel("Density")
plt.show()

"""#### Task 1 Question 3"""

from mpl_toolkits.mplot3d import Axes3D

x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
x, y = np.meshgrid(x, y)

z = x**2 + y**2

# Create a 3D plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(x, y, z, cmap='viridis')

# Set labels and title
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('$Z = X^2 + Y^2$')

plt.show()

"""#### Task 1 Question 4"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import pandas as pd
from matplotlib import pyplot as plt
# %matplotlib inline

df = pd.read_csv('/content/Pokemon.csv', index_col=0, encoding='latin')

# Display the first few rows to understand the structure
df.head()

features = ['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']
df_selected = df[features].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values if any
df_selected.dropna(inplace=True)

# Calculate Pearson correlation
pearson_corr = df_selected.corr()

# Calculate Spearman correlation
spearman_corr = df_selected.corr(method='spearman')

# Plot Pearson correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(pearson_corr, annot=True, cmap='coolwarm', cbar=True)
plt.title('Pearson Correlation Heatmap')
plt.show()

# Plot Spearman correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(spearman_corr, annot=True, cmap='coolwarm', cbar=True)
plt.title('Spearman Rank Correlation Heatmap')
plt.show()